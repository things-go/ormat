// Code generated by ormat. DO NOT EDIT.
// version: v0.7.3

package testdata

import (
	"time"

	assist "github.com/things-go/gorm-assist"
	"gorm.io/gorm"
)

// TestData1 公告-面向所有人的消息
type TestData1 struct {
	Id        int64      `gorm:"column:id;autoIncrement:true;not null;primaryKey" json:"id,omitempty"`
	Title     string     `gorm:"column:title;type:varchar(255);not null;index:uk_title_created_at,priority:1;comment:标题" json:"title,omitempty"`         // 标题
	Content   *string    `gorm:"column:content;type:varchar(2048);default:null;comment:内容" json:"content,omitempty"`                                     // 内容
	Value1    float32    `gorm:"column:value1;type:float;not null;default:1;comment:值1,[0:空,1:键1,2:键2,3:键3]" json:"value1,omitempty"`                    // 值1,[0:空,1:键1,2:键2,3:键3]
	Value2    string     `gorm:"column:value2;type:decimal(10,1);not null;default:2;comment:值2,0:空,1:键1,2:键2,3:键3" json:"value2,omitempty"`              // 值2,0:空,1:键1,2:键2,3:键3
	Value3    float64    `gorm:"column:value3;type:double(16,2);not null;default:3;comment:值3" json:"value3,omitempty"`                                  // 值3
	Value4    string     `gorm:"column:value4;type:enum('00','SH');not null;default:00;comment:值4" json:"value4,omitempty"`                              // 值4
	CreatedAt time.Time  `gorm:"column:created_at;type:datetime;not null;index:uk_title_created_at,priority:2;comment:发布时间" json:"created_at,omitempty"` // 发布时间
	UpdatedAt *time.Time `gorm:"column:updated_at;type:datetime;default:null" json:"updated_at,omitempty"`
}

// TableName implement schema.Tabler interface
func (*TestData1) TableName() string {
	return "test_data1"
}

// SelectTestData1 database column name.
var SelectTestData1 = []string{
	"`test_data1`.`id`",
	"`test_data1`.`title`",
	"`test_data1`.`content`",
	"`test_data1`.`value1`",
	"`test_data1`.`value2`",
	"`test_data1`.`value3`",
	"`test_data1`.`value4`",
	"UNIX_TIMESTAMP(`test_data1`.`created_at`) AS `created_at`",
	"IFNULL(UNIX_TIMESTAMP(`test_data1`.`updated_at`), 0) AS `updated_at`",
}

type X_TestData1Columns struct {
	Id        string
	Title     string
	Content   string
	Value1    string
	Value2    string
	Value3    string
	Value4    string
	CreatedAt string
	UpdatedAt string
}

type TestData1Impl struct {
	// private fields
	xTableName string

	ALL       assist.Asterisk
	Id        assist.Int64
	Title     assist.String
	Content   assist.String
	Value1    assist.Float32
	Value2    assist.Decimal
	Value3    assist.Float64
	Value4    assist.String
	CreatedAt assist.Time
	UpdatedAt assist.Time
}

var xx_TestData1 = New_X_TestData1("test_data1")
var xx_TestData1Columns = X_TestData1Columns{
	Id:        "id",
	Title:     "title",
	Content:   "content",
	Value1:    "value1",
	Value2:    "value2",
	Value3:    "value3",
	Value4:    "value4",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

func X_TestData1() TestData1Impl {
	return xx_TestData1
}

func New_X_TestData1(tableName string) TestData1Impl {
	xCols := &xx_TestData1Columns
	return TestData1Impl{
		xTableName: tableName,

		ALL: assist.NewAsterisk(tableName),

		Id:        assist.NewInt64(tableName, xCols.Id),
		Title:     assist.NewString(tableName, xCols.Title),
		Content:   assist.NewString(tableName, xCols.Content),
		Value1:    assist.NewFloat32(tableName, xCols.Value1),
		Value2:    assist.NewDecimal(tableName, xCols.Value2),
		Value3:    assist.NewFloat64(tableName, xCols.Value3),
		Value4:    assist.NewString(tableName, xCols.Value4),
		CreatedAt: assist.NewTime(tableName, xCols.CreatedAt),
		UpdatedAt: assist.NewTime(tableName, xCols.UpdatedAt),
	}
}

func (x *TestData1Impl) X_TableName() string {
	return x.xTableName
}

func (*TestData1Impl) As(alias string) TestData1Impl {
	return New_X_TestData1(alias)
}

func (*TestData1Impl) X_Model() *TestData1 {
	return &TestData1{}
}

func (*TestData1Impl) X_Columns() X_TestData1Columns {
	return xx_TestData1Columns
}

func (*TestData1Impl) Xc_Model() assist.Condition {
	return func(db *gorm.DB) *gorm.DB {
		return db.Model(&TestData1{})
	}
}

func X_ColumnsTestData1() X_TestData1Columns {
	return xx_TestData1Columns
}

func X_SelectTestData1(prefixes ...string) []assist.Expr {
	x := &xx_TestData1
	xCols := &xx_TestData1Columns
	if len(prefixes) > 0 && prefixes[0] != "" {
		prefix := prefixes[0] + "_"
		return []assist.Expr{
			x.Id.As(prefix + xCols.Id),
			x.Title.As(prefix + xCols.Title),
			x.Content.As(prefix + xCols.Content),
			x.Value1.As(prefix + xCols.Value1),
			x.Value2.As(prefix + xCols.Value2),
			x.Value3.As(prefix + xCols.Value3),
			x.Value4.As(prefix + xCols.Value4),
			x.CreatedAt.UnixTimestamp().As(prefix + xCols.CreatedAt),
			x.UpdatedAt.UnixTimestamp().IfNull(0).As(prefix + xCols.UpdatedAt),
		}
	} else {
		return []assist.Expr{
			x.Id,
			x.Title,
			x.Content,
			x.Value1,
			x.Value2,
			x.Value3,
			x.Value4,
			x.CreatedAt.UnixTimestamp().As(xCols.CreatedAt),
			x.UpdatedAt.UnixTimestamp().IfNull(0).As(xCols.UpdatedAt),
		}
	}
}

func Xc_SelectTestData1(prefixes ...string) assist.Condition {
	return assist.Select(X_SelectTestData1(prefixes...)...)
}

/* protobuf field helper
// TestData1 公告-面向所有人的消息
message TestData1 {
  int64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { type: [ INTEGER ] }, (things_go.seaql.field) = { type: "bigint NOT NULL AUTO_INCREMENT" }];
  // 标题
  string title = 2 [(things_go.seaql.field) = { type: "varchar(255) NOT NULL DEFAULT ''" }];
  // 内容
  string content = 3 [(things_go.seaql.field) = { type: "varchar(2048) DEFAULT NULL" }];
  // 值1,[0:空,1:键1,2:键2,3:键3]
  float value1 = 4 [(things_go.seaql.field) = { type: "float NOT NULL DEFAULT '1'" }];
  // 值2,0:空,1:键1,2:键2,3:键3
  string value2 = 5 [(things_go.seaql.field) = { type: "decimal(10,1) NOT NULL DEFAULT '2'" }];
  // 值3
  double value3 = 6 [(things_go.seaql.field) = { type: "double(16,2) NOT NULL DEFAULT '3'" }];
  // 值4
  string value4 = 7 [(things_go.seaql.field) = { type: "enum('00','SH') NOT NULL DEFAULT '00'" }];
  // 发布时间
  int64 created_at = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { type: [ INTEGER ] }, (things_go.seaql.field) = { type: "datetime NOT NULL" }];
  int64 updated_at = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { type: [ INTEGER ] }, (things_go.seaql.field) = { type: "datetime DEFAULT NULL" }];
}
*/
// TestData2 公告-面向所有人的消息
type TestData2 struct {
	Id        int64     `gorm:"column:id;autoIncrement:true;not null;primaryKey" json:"id,omitempty"`
	Title     string    `gorm:"column:title;type:varchar(255);not null;index:uk_title_created_at,priority:1;comment:标题" json:"title,omitempty"`         // 标题
	Content   string    `gorm:"column:content;type:varchar(2048);not null;comment:内容" json:"content,omitempty"`                                         // 内容
	Value1    float32   `gorm:"column:value1;type:float;not null;default:1;comment:值1,0:空,1:键1,2:键2,3:键3" json:"value1,omitempty"`                      // 值1,0:空,1:键1,2:键2,3:键3
	Value2    float32   `gorm:"column:value2;type:float(10,1);not null;default:2;comment:值2,[0:空,1:键1,2:键2,3:键3]" json:"value2,omitempty"`              // 值2,[0:空,1:键1,2:键2,3:键3]
	Value3    float64   `gorm:"column:value3;type:double(16,2);not null;default:3;comment:值3" json:"value3,omitempty"`                                  // 值3
	Value4    string    `gorm:"column:value4;type:enum('00','SH');not null;default:00;comment:值4" json:"value4,omitempty"`                              // 值4
	CreatedAt time.Time `gorm:"column:created_at;type:datetime;not null;index:uk_title_created_at,priority:2;comment:发布时间" json:"created_at,omitempty"` // 发布时间
	UpdatedAt time.Time `gorm:"column:updated_at;type:datetime;not null" json:"updated_at,omitempty"`
}

// TableName implement schema.Tabler interface
func (*TestData2) TableName() string {
	return "test_data2"
}

// SelectTestData2 database column name.
var SelectTestData2 = []string{
	"`test_data2`.`id`",
	"`test_data2`.`title`",
	"`test_data2`.`content`",
	"`test_data2`.`value1`",
	"`test_data2`.`value2`",
	"`test_data2`.`value3`",
	"`test_data2`.`value4`",
	"UNIX_TIMESTAMP(`test_data2`.`created_at`) AS `created_at`",
	"UNIX_TIMESTAMP(`test_data2`.`updated_at`) AS `updated_at`",
}

type X_TestData2Columns struct {
	Id        string
	Title     string
	Content   string
	Value1    string
	Value2    string
	Value3    string
	Value4    string
	CreatedAt string
	UpdatedAt string
}

type TestData2Impl struct {
	// private fields
	xTableName string

	ALL       assist.Asterisk
	Id        assist.Int64
	Title     assist.String
	Content   assist.String
	Value1    assist.Float32
	Value2    assist.Float32
	Value3    assist.Float64
	Value4    assist.String
	CreatedAt assist.Time
	UpdatedAt assist.Time
}

var xx_TestData2 = New_X_TestData2("test_data2")
var xx_TestData2Columns = X_TestData2Columns{
	Id:        "id",
	Title:     "title",
	Content:   "content",
	Value1:    "value1",
	Value2:    "value2",
	Value3:    "value3",
	Value4:    "value4",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

func X_TestData2() TestData2Impl {
	return xx_TestData2
}

func New_X_TestData2(tableName string) TestData2Impl {
	xCols := &xx_TestData2Columns
	return TestData2Impl{
		xTableName: tableName,

		ALL: assist.NewAsterisk(tableName),

		Id:        assist.NewInt64(tableName, xCols.Id),
		Title:     assist.NewString(tableName, xCols.Title),
		Content:   assist.NewString(tableName, xCols.Content),
		Value1:    assist.NewFloat32(tableName, xCols.Value1),
		Value2:    assist.NewFloat32(tableName, xCols.Value2),
		Value3:    assist.NewFloat64(tableName, xCols.Value3),
		Value4:    assist.NewString(tableName, xCols.Value4),
		CreatedAt: assist.NewTime(tableName, xCols.CreatedAt),
		UpdatedAt: assist.NewTime(tableName, xCols.UpdatedAt),
	}
}

func (x *TestData2Impl) X_TableName() string {
	return x.xTableName
}

func (*TestData2Impl) As(alias string) TestData2Impl {
	return New_X_TestData2(alias)
}

func (*TestData2Impl) X_Model() *TestData2 {
	return &TestData2{}
}

func (*TestData2Impl) X_Columns() X_TestData2Columns {
	return xx_TestData2Columns
}

func (*TestData2Impl) Xc_Model() assist.Condition {
	return func(db *gorm.DB) *gorm.DB {
		return db.Model(&TestData2{})
	}
}

func X_ColumnsTestData2() X_TestData2Columns {
	return xx_TestData2Columns
}

func X_SelectTestData2(prefixes ...string) []assist.Expr {
	x := &xx_TestData2
	xCols := &xx_TestData2Columns
	if len(prefixes) > 0 && prefixes[0] != "" {
		prefix := prefixes[0] + "_"
		return []assist.Expr{
			x.Id.As(prefix + xCols.Id),
			x.Title.As(prefix + xCols.Title),
			x.Content.As(prefix + xCols.Content),
			x.Value1.As(prefix + xCols.Value1),
			x.Value2.As(prefix + xCols.Value2),
			x.Value3.As(prefix + xCols.Value3),
			x.Value4.As(prefix + xCols.Value4),
			x.CreatedAt.UnixTimestamp().As(prefix + xCols.CreatedAt),
			x.UpdatedAt.UnixTimestamp().As(prefix + xCols.UpdatedAt),
		}
	} else {
		return []assist.Expr{
			x.Id,
			x.Title,
			x.Content,
			x.Value1,
			x.Value2,
			x.Value3,
			x.Value4,
			x.CreatedAt.UnixTimestamp().As(xCols.CreatedAt),
			x.UpdatedAt.UnixTimestamp().As(xCols.UpdatedAt),
		}
	}
}

func Xc_SelectTestData2(prefixes ...string) assist.Condition {
	return assist.Select(X_SelectTestData2(prefixes...)...)
}

/* protobuf field helper
// TestData2 公告-面向所有人的消息
message TestData2 {
  int64 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { type: [ INTEGER ] }, (things_go.seaql.field) = { type: "bigint NOT NULL AUTO_INCREMENT" }];
  // 标题
  string title = 2 [(things_go.seaql.field) = { type: "varchar(255) NOT NULL DEFAULT ''" }];
  // 内容
  string content = 3 [(things_go.seaql.field) = { type: "varchar(2048) NOT NULL DEFAULT ''" }];
  // 值1,0:空,1:键1,2:键2,3:键3
  float value1 = 4 [(things_go.seaql.field) = { type: "float NOT NULL DEFAULT '1'" }];
  // 值2,[0:空,1:键1,2:键2,3:键3]
  float value2 = 5 [(things_go.seaql.field) = { type: "float(10,1) NOT NULL DEFAULT '2'" }];
  // 值3
  double value3 = 6 [(things_go.seaql.field) = { type: "double(16,2) NOT NULL DEFAULT '3'" }];
  // 值4
  string value4 = 7 [(things_go.seaql.field) = { type: "enum('00','SH') NOT NULL DEFAULT '00'" }];
  // 发布时间
  int64 created_at = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { type: [ INTEGER ] }, (things_go.seaql.field) = { type: "datetime NOT NULL" }];
  int64 updated_at = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { type: [ INTEGER ] }, (things_go.seaql.field) = { type: "datetime NOT NULL" }];
}
*/
