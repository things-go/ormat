// Code generated by ormat. DO NOT EDIT.
// version: {{.Version}}

package {{.PackageName}}

{{if .Imports}}
import (
{{- range $k, $v := .Imports}}
    {{$k}}
{{- end}}
)
{{end}}

{{- range $e := .Structs}}
// {{$e.StructName}} {{$e.StructComment}}
type {{$e.StructName}} struct {
{{- range $field := $e.StructFields}}
    {{$field.FieldName}} {{$field.FieldType}} {{if $field.FieldTag}}`{{$field.FieldTag}}`{{end}} {{if $field.FieldComment}}// {{$field.FieldComment}}{{end}}
{{- end}}
}

// TableName implement schema.Tabler interface
func (*{{$e.StructName}}) TableName() string {
	return "{{$e.TableName}}"
}

/* protobuf and gorm field helper
{{- $tableName := $e.TableName}}
{{- $abbrTableName := $e.AbbrTableName}}
// {{$e.StructName}}Columns database column name.
var {{$e.StructName}}Columns = []string {
{{- range $field := $e.ProtoMessageFields}}
	{{- if $field.IsTimestamp}}
	"UNIX_TIMESTAMP({{$field.FieldName}}) AS {{$field.FieldName}}",
	{{- else}}
	"{{$field.FieldName}}",
	{{- end}}
{{- end}}
}
// {{$e.StructName}}ColumnsWithTable database column name with table prefix
var {{$e.StructName}}ColumnsWithTable = []string {
{{- range $field := $e.ProtoMessageFields}}
	{{- if $field.IsTimestamp}}
	"UNIX_TIMESTAMP({{$tableName}}.{{$field.FieldName}}) AS {{$tableName}}_{{$field.FieldName}}",
	{{- else}}
	"{{$tableName}}.{{$field.FieldName}} AS {{$tableName}}_{{$field.FieldName}}",
	{{- end}}
{{- end}}
}
// {{$e.StructName}}ColumnsWithAbbrTable database column name with abbr table prefix
var {{$e.StructName}}ColumnsWithAbbrTable = []string {
{{- range $field := $e.ProtoMessageFields}}
	{{- if $field.IsTimestamp}}
	"UNIX_TIMESTAMP({{$abbrTableName}}.{{$field.FieldName}}) AS {{$abbrTableName}}_{{$field.FieldName}}",
	{{- else}}
	"{{$abbrTableName}}.{{$field.FieldName}} AS {{$abbrTableName}}_{{$field.FieldName}}",
	{{- end}}
{{- end}}
}

// {{$e.StructName}} {{.StructComment}}
message {{$e.StructName}} {
{{- range $index, $field := $e.ProtoMessageFields}}
  {{- if $field.FieldComment}}
  // {{$field.FieldComment}}
  {{- end}}
  {{$field.FieldDataType}} {{$field.FieldName}} = {{add $index 1}} {{- if $field.FieldAnnotation}} {{$field.FieldAnnotation}} {{- end}};
{{- end}}
}
// {{$e.StructName}}WithTable {{.StructComment}}
message {{$e.StructName}}WithTable {
{{- range $index, $field := $e.ProtoMessageFields}}
  {{- if $field.FieldComment}}
  // {{$field.FieldComment}}
  {{- end}}
  {{$field.FieldDataType}} {{$tableName}}_{{$field.FieldName}} = {{add $index 1}} {{- if $field.FieldAnnotation}} {{$field.FieldAnnotation}} {{- end}};
{{- end}}
}
// {{$e.StructName}}WithAbbrTable {{.StructComment}}
message {{$e.StructName}}WithAbbrTable {
{{- range $index, $field := $e.ProtoMessageFields}}
  {{- if $field.FieldComment}}
  // {{$field.FieldComment}}
  {{- end}}
  {{$field.FieldDataType}} {{$abbrTableName}}_{{$field.FieldName}} = {{add $index 1}} {{- if $field.FieldAnnotation}} {{$field.FieldAnnotation}} {{- end}};
{{- end}}
}
*/

{{- end}}

