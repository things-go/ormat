// Code generated by ormat. DO NOT EDIT.
// version: {{.Version}}

package {{.PackageName}}

{{if .Imports}}
import (
{{- range $k, $v := .Imports}}
    {{$k}}
{{- end}}
)
{{end}}

{{- $hasColumn := .HasColumn}}
{{- $hasHelper := .HasHelper}}
{{- range $e := .Structs}}
// {{$e.StructName}} {{$e.StructComment}}
type {{$e.StructName}} struct {
{{- range $field := $e.StructFields}}
    {{$field.FieldName}} {{$field.FieldType}} {{if $field.FieldTag}}`{{$field.FieldTag}}`{{end}} {{if $field.FieldComment}}// {{$field.FieldComment}}{{end}}
{{- end}}
}

// TableName implement schema.Tabler interface
func (*{{$e.StructName}}) TableName() string {
	return "{{$e.TableName}}"
}

{{- $tableName := $e.TableName}}
{{- $abbrTableName := $e.AbbrTableName}}
{{- if $hasColumn}}
// Select{{$e.StructName}} database column name.
var Select{{$e.StructName}} = []string {
{{- range $field := $e.StructFields}}
    {{- $fieldName := snakecase $field.FieldName}}
	{{- if $field.IsTimestamp}}
	{{- if $field.IsNullable}}
	"IFNULL(UNIX_TIMESTAMP(`{{$fieldName}}`), 0) AS `{{$fieldName}}`",
	{{- else}}
	"UNIX_TIMESTAMP(`{{$fieldName}}`) AS `{{$fieldName}}`",
	{{- end}}
	{{- else}}
	"`{{$fieldName}}`",
	{{- end}}
{{- end}}
}

// Select{{$e.StructName}}WithTable database column name with table prefix
var Select{{$e.StructName}}WithTable = []string {
{{- range $field := $e.StructFields}}
    {{- $fieldName := snakecase $field.FieldName}}
	{{- if $field.IsTimestamp}}
	{{- if $field.IsNullable}}
	"IFNULL(UNIX_TIMESTAMP(`{{$tableName}}`.`{{$fieldName}}`), 0) AS `{{$tableName}}_{{$fieldName}}`",
	{{- else}}
	"UNIX_TIMESTAMP(`{{$tableName}}`.`{{$fieldName}}`) AS `{{$tableName}}_{{$fieldName}}`",
	{{- end}}
	{{- else}}
	"`{{$tableName}}`.`{{$fieldName}}` AS `{{$tableName}}_{{$fieldName}}`",
	{{- end}}
{{- end}}
}
// Select{{$e.StructName}}WithAbbrTable database column name with abbr table prefix
var Select{{$e.StructName}}WithAbbrTable = []string {
{{- range $field := $e.StructFields}}
    {{- $fieldName := snakecase $field.FieldName}}
	{{- if $field.IsTimestamp}}
	{{- if $field.IsNullable}}
	"IFNULL(UNIX_TIMESTAMP(`{{$abbrTableName}}`.`{{$fieldName}}`), 0) AS `{{$abbrTableName}}_{{$fieldName}}`",
	{{- else}}
	"UNIX_TIMESTAMP(`{{$abbrTableName}}`.`{{$fieldName}}`) AS `{{$abbrTableName}}_{{$fieldName}}`",
	{{- end}}
	{{- else}}
	"`{{$abbrTableName}}`.`{{$fieldName}}` AS `{{$abbrTableName}}_{{$fieldName}}`",
	{{- end}}
{{- end}}
}
{{- end}}

{{- if $hasHelper}}
/* protobuf field helper
// {{$e.StructName}} {{.StructComment}}
message {{$e.StructName}} {
{{- range $index, $field := $e.ProtoMessageFields}}
  {{- if $field.FieldComment}}
  // {{$field.FieldComment}}
  {{- end}}
  {{$field.FieldDataType}} {{$field.FieldName}} = {{add $index 1}} {{- if $field.FieldAnnotation}} {{$field.FieldAnnotation}} {{- end}};
{{- end}}
}
// {{$e.StructName}}WithTable {{.StructComment}}
message {{$e.StructName}}WithTable {
{{- range $index, $field := $e.ProtoMessageFields}}
  {{- if $field.FieldComment}}
  // {{$field.FieldComment}}
  {{- end}}
  {{$field.FieldDataType}} {{$tableName}}_{{$field.FieldName}} = {{add $index 1}} {{- if $field.FieldAnnotation}} {{$field.FieldAnnotation}} {{- end}};
{{- end}}
}
// {{$e.StructName}}WithAbbrTable {{.StructComment}}
message {{$e.StructName}}WithAbbrTable {
{{- range $index, $field := $e.ProtoMessageFields}}
  {{- if $field.FieldComment}}
  // {{$field.FieldComment}}
  {{- end}}
  {{$field.FieldDataType}} {{$abbrTableName}}_{{$field.FieldName}} = {{add $index 1}} {{- if $field.FieldAnnotation}} {{$field.FieldAnnotation}} {{- end}};
{{- end}}
}
*/
{{- end}}
{{- end}}

