// Code generated by ormat. DO NOT EDIT.
// version: {{.Version}}

package {{.PackageName}}

import (
    "gorm.io/gorm"
)

{{- range $e := .Structs}}

type {{$e.StructName}}_Entity struct {
	db *gorm.DB
}

func New_{{$e.StructName}}(db *gorm.DB) *{{$e.StructName}}_Entity {
	return &{{$e.StructName}}_Entity{
		db: db,
	}
}

func (x *{{$e.StructName}}_Entity) First(query any, funcs ...func(*gorm.DB) *gorm.DB) (*{{$e.StructName}}, error) {
	var row {{$e.StructName}}

	err := x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Where(query).
		First(&row).Error
	if err != nil {
		return nil, err
	}
	return &row, nil
}

func (x *{{$e.StructName}}_Entity) Take(query any, funcs ...func(*gorm.DB) *gorm.DB) (*{{$e.StructName}}, error) {
	var row {{$e.StructName}}

	err := x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Where(query).
		Take(&row).Error
	if err != nil {
		return nil, err
	}
	return &row, nil
}

func (x *{{$e.StructName}}_Entity) Last(query any, funcs ...func(*gorm.DB) *gorm.DB) (*{{$e.StructName}}, error) {
	var row {{$e.StructName}}

	err := x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Where(query).
		Last(&row).Error
	if err != nil {
		return nil, err
	}
	return &row, nil
}

func (x *{{$e.StructName}}_Entity) Scan(query any, funcs ...func(*gorm.DB) *gorm.DB) (*{{$e.StructName}}, error) {
	var row {{$e.StructName}}

	err := x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Where(query).
		Scan(&row).Error
	if err != nil {
		return nil, err
	}
	return &row, nil
}

func (x *{{$e.StructName}}_Entity) FindAll(funcs ...func(*gorm.DB) *gorm.DB) ([]*{{$e.StructName}}, error) {
	var rows []*{{$e.StructName}}

	err := x.Find(&rows, funcs...)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func (x *{{$e.StructName}}_Entity) Find(dest any, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Find(dest).Error
}

func (x *{{$e.StructName}}_Entity) Create(value any) error {
	return x.db.Create(value).Error
}

func (x *{{$e.StructName}}_Entity) CreateInBatches(value any, batchSize int) error {
	return x.db.CreateInBatches(value, batchSize).Error
}

func (x *{{$e.StructName}}_Entity) Save(value any, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Save(value).Error
}

func (x *{{$e.StructName}}_Entity) Updates(value *{{$e.StructName}}, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Updates(value).Error
}

func (x *{{$e.StructName}}_Entity) Update(column string, value any, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Update(column, value).Error
}

func (x *{{$e.StructName}}_Entity) UpdateColumns(value *{{$e.StructName}}, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		UpdateColumns(value).Error
}

func (x *{{$e.StructName}}_Entity) UpdateColumn(column string, value any, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		UpdateColumn(column, value).Error
}

func (x *{{$e.StructName}}_Entity) Delete(funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Delete(&{{$e.StructName}}{}).Error
}

{{- end}}