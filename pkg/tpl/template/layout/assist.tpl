// Code generated by ormat. DO NOT EDIT.
// version: {{.Version}}

package {{.PackageName}}

import (
    assist "github.com/things-go/gorm-assist"
	"gorm.io/gorm"
)

{{- range $e := .Structs}}
const (
	// hold model `{{$e.StructName}}` table name
	xx_{{$e.StructName}}_TableName = "{{$e.TableName}}"
	// hold model `{{$e.StructName}}` column name
{{- range $field := $e.StructFields}}
    xx_{{$e.StructName}}_{{$field.FieldName}} = "{{$field.ColumnName}}"
{{- end}}
	// hold model `{{$e.StructName}}` column name with table name(`{{$e.TableName}}`) prefix
{{- range $field := $e.StructFields}}
    xx_{{$e.StructName}}_{{$field.FieldName}}_WithTableName = xx_{{$e.StructName}}_TableName + "_" + xx_{{$e.StructName}}_{{$field.FieldName}}
{{- end}}
)

var xxx_{{$e.StructName}}_Native_Model = new_X_{{$e.StructName}}("")
var xxx_{{$e.StructName}}_Model = new_X_{{$e.StructName}}(xx_{{$e.StructName}}_TableName)

type {{$e.StructName}}_Active struct {
	// private fields
	xTableName string 

	ALL assist.Asterisk
{{- range $field := $e.StructFields}}
    {{$field.FieldName}} assist.{{$field.AssistType}}
{{- end}}
}

// X_Native_{{$e.StructName}} native model without TableName.
func X_Native_{{$e.StructName}}() {{$e.StructName}}_Active {
	return xxx_{{$e.StructName}}_Native_Model
}

// X_{{$e.StructName}} model with TableName `{{$e.TableName}}`.
func X_{{$e.StructName}}() {{$e.StructName}}_Active {
	return xxx_{{$e.StructName}}_Model
}

func new_X_{{$e.StructName}}(xTableName string) {{$e.StructName}}_Active {
	return {{$e.StructName}}_Active{
		xTableName: xTableName,

		ALL:  assist.NewAsterisk(xTableName),
	{{range $field := $e.StructFields}}
		{{$field.FieldName}}: assist.New{{$field.AssistType}}(xTableName, xx_{{$e.StructName}}_{{$field.FieldName}}),
	{{- end}}			
	}
}

// New_X_{{$e.StructName}} new instance.
func New_X_{{$e.StructName}}(xTableName string) {{$e.StructName}}_Active {
	switch xTableName {
	case "":
		return xxx_{{$e.StructName}}_Native_Model
	case xx_{{$e.StructName}}_TableName:
		return xxx_{{$e.StructName}}_Model
	default:
		return new_X_{{$e.StructName}}(xTableName)
	}
}

// X_TableName hold table name when call New_X_{{$e.StructName}} or {{$e.StructName}}_Active.As that you defined.
func (x *{{$e.StructName}}_Active) X_TableName() string {
	return x.xTableName
}

// As alias
func (*{{$e.StructName}}_Active) As(alias string) {{$e.StructName}}_Active {
	return New_X_{{$e.StructName}}(alias)
}

// X_Model model
func (*{{$e.StructName}}_Active) X_Model() *{{$e.StructName}} {
	return &{{$e.StructName}}{}
}

// TableName hold model `{{$e.StructName}}` table name returns `{{$e.TableName}}`.
func (x *{{$e.StructName}}_Active) TableName() string {
	return xx_{{$e.StructName}}_TableName
}
{{- range $field := $e.StructFields}}
// Field_{{$field.FieldName}} hold model `{{$e.StructName}}` column name.
// if prefixes not exist returns `{{$field.ColumnName}}`, others `{prefixes[0]}_{{$field.ColumnName}}`
func (*{{$e.StructName}}_Active) Field_{{$field.FieldName}}(prefixes ...string) string {
	if len(prefixes) == 0 {
		return xx_{{$e.StructName}}_{{$field.FieldName}}
	}
	if prefixes[0] == xx_{{$e.StructName}}_TableName {
		return xx_{{$e.StructName}}_{{$field.FieldName}}_WithTableName
	}
	return prefixes[0] + "_" + xx_{{$e.StructName}}_{{$field.FieldName}}
}
{{- end}}

func x_Select{{$e.StructName}}(x *{{$e.StructName}}_Active, prefixes ...string) []assist.Expr {
	if len(prefixes) > 0 {
		return []assist.Expr{
	{{- range $field := $e.StructFields}}
		{{if $field.IsSkipColumn}}// {{end}}x.{{$field.FieldName}}{{- if $field.IsTimestamp}}.UnixTimestamp(){{- if $field.IsNullable}}.IfNull(0){{- end}}{{- end}}.As(x.Field_{{$field.FieldName}}(prefixes...)),
	{{- end}}
		}
	} else {
		return []assist.Expr{
	{{- range $field := $e.StructFields}}
		{{- if $field.IsTimestamp}}
		{{if $field.IsSkipColumn}}// {{end}}x.{{$field.FieldName}}.UnixTimestamp(){{- if $field.IsNullable}}.IfNull(0){{- end}}.As(xx_{{$e.StructName}}_{{$field.FieldName}}),
		{{- else}}
		{{if $field.IsSkipColumn}}// {{end}}x.{{$field.FieldName}},
		{{- end}}
	{{- end}}
		}
	}
}

// X_Native_Select{{$e.StructName}} select field use use X_Native_{{$e.StructName}}().
func X_Native_Select{{$e.StructName}}() []assist.Expr {
	return x_Select{{$e.StructName}}(&xxx_{{$e.StructName}}_Native_Model)
}

// X_Select{{$e.StructName}} select fields use X_{{$e.StructName}}().
func X_Select{{$e.StructName}}(prefixes ...string) []assist.Expr {
	return x_Select{{$e.StructName}}(&xxx_{{$e.StructName}}_Model, prefixes...)
}

/*********************************** entity ***********************************/

type {{$e.StructName}}_Entity struct {
	db *gorm.DB
}

func New_{{$e.StructName}}(db *gorm.DB) *{{$e.StructName}}_Entity {
	return &{{$e.StructName}}_Entity{
		db: db,
	}
}

func (x *{{$e.StructName}}_Entity) First(query any, funcs ...func(*gorm.DB) *gorm.DB) (*{{$e.StructName}}, error) {
	var row {{$e.StructName}}

	err := x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Where(query).
		First(&row).Error
	if err != nil {
		return nil, err
	}
	return &row, nil
}

func (x *{{$e.StructName}}_Entity) Take(query any, funcs ...func(*gorm.DB) *gorm.DB) (*{{$e.StructName}}, error) {
	var row {{$e.StructName}}

	err := x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Where(query).
		Take(&row).Error
	if err != nil {
		return nil, err
	}
	return &row, nil
}

func (x *{{$e.StructName}}_Entity) Last(query any, funcs ...func(*gorm.DB) *gorm.DB) (*{{$e.StructName}}, error) {
	var row {{$e.StructName}}

	err := x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Where(query).
		Last(&row).Error
	if err != nil {
		return nil, err
	}
	return &row, nil
}

func (x *{{$e.StructName}}_Entity) Scan(query any, funcs ...func(*gorm.DB) *gorm.DB) (*{{$e.StructName}}, error) {
	var row {{$e.StructName}}

	err := x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Where(query).
		Scan(&row).Error
	if err != nil {
		return nil, err
	}
	return &row, nil
}

func (x *{{$e.StructName}}_Entity) FindAll(funcs ...func(*gorm.DB) *gorm.DB) ([]*{{$e.StructName}}, error) {
	var rows []*{{$e.StructName}}

	err := x.Find(&rows, funcs...)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func (x *{{$e.StructName}}_Entity) Find(dest any, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Find(dest).Error
}

func (x *{{$e.StructName}}_Entity) Create(value any) error {
	return x.db.Create(value).Error
}

func (x *{{$e.StructName}}_Entity) CreateInBatches(value any, batchSize int) error {
	return x.db.CreateInBatches(value, batchSize).Error
}

func (x *{{$e.StructName}}_Entity) Save(value any, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Save(value).Error
}

func (x *{{$e.StructName}}_Entity) Updates(value *{{$e.StructName}}, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Updates(value).Error
}

func (x *{{$e.StructName}}_Entity) Update(column string, value any, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Update(column, value).Error
}

func (x *{{$e.StructName}}_Entity) UpdateColumns(value *{{$e.StructName}}, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		UpdateColumns(value).Error
}

func (x *{{$e.StructName}}_Entity) UpdateColumn(column string, value any, funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		UpdateColumn(column, value).Error
}

func (x *{{$e.StructName}}_Entity) Delete(funcs ...func(*gorm.DB) *gorm.DB) error {
	return x.db.Model(&{{$e.StructName}}{}).
		Scopes(funcs...).
		Delete(&{{$e.StructName}}{}).Error
}
{{- end}}