package ast

import (
	"strings"

	"github.com/things-go/ormat/consts"
)

// File a file
type File struct {
	Filename        string            // file name
	PackageName     string            // package name
	Imports         map[string]string // import package
	Structs         []Struct          // struct list
	IsOutColumnName bool              // 是否输出表的列名
}

// AddImport Add import by type
func (p *File) AddImport(imp string) *File {
	if p.Imports == nil {
		p.Imports = make(map[string]string)
	}
	p.Imports[imp] = imp
	return p
}

// SetOutColumnName set out column name
func (p *File) SetOutColumnName(b bool) *File {
	p.IsOutColumnName = b
	return p
}

// AddStruct Add a structure
func (p *File) AddStruct(st Struct) *File {
	p.Structs = append(p.Structs, st)
	return p
}

// Build the file data
func (p *File) Build() string {
	buf := strings.Builder{}
	buf.WriteString("// Code generated by ormat. DO NOT EDIT.\n")
	buf.WriteString("// version: " + consts.Version + "\n")
	buf.WriteString("\n")
	buf.WriteString("package" + delimTab + p.PackageName + delimLF)

	// auto add import
	for _, v := range p.Structs {
		for _, v1 := range v.StructFields {
			if v2, ok := ImportsHeads[v1.FieldType]; ok {
				if v2 != "" {
					p.AddImport(v2)
				}
			}
		}
	}

	// add imports
	if len(p.Imports) > 0 {
		buf.WriteString("import (" + delimLF)
		for _, v := range p.Imports {
			buf.WriteString(v + delimLF)
		}
		buf.WriteString(")" + delimLF)
	}

	// add struct
	for _, v := range p.Structs {
		buf.WriteString(v.Build() + delimLF)
		// add table name function
		buf.WriteString(v.BuildTableNameTemplate() + delimLF)
		if p.IsOutColumnName {
			buf.WriteString(delimLF)
			buf.WriteString(v.BuildColumnNameTemplate())
		}
		buf.WriteString(v.BuildProtobufTemple() + delimLF)
	}
	return buf.String()
}

// Build all struct in one file
func (p *File) BuildSQL() string {
	buf := strings.Builder{}

	// add struct
	for _, v := range p.Structs {
		buf.WriteString(v.BuildSQL() + delimLF)
	}
	return buf.String()
}

// ImportsHeads import head options
var ImportsHeads = map[string]string{
	"string":         `"string"`,
	"time.Time":      `"time"`,
	"gorm.Model":     `"gorm.io/gorm"`,
	"fmt":            `"fmt"`,
	"datatypes.JSON": `"gorm.io/datatypes"`,
	"datatypes.Date": `"gorm.io/datatypes"`,
}
